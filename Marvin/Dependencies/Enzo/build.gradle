/*
 * Copyright (c) 2015 by Gerrit Grunwald
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Enzo main build file
import java.text.SimpleDateFormat 

import org.gradle.api.XmlProvider
import org.gradle.api.artifacts.maven.MavenDeployment
/* Updated by Patrick Kutch to accomidate Java 11 */
plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
	id 'net.nemerosa.versioning' version '2.8.2'
	id 'org.openjfx.javafxplugin' version '0.0.9'
	id 'com.gradle.build-scan' version '2.1'

    id 'idea'
    id 'java'
}

sourceCompatibility = '11'

wrapper {
    gradleVersion = '5.2'
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
	mavenCentral()
}

apply plugin: 'idea'
apply plugin: 'signing'

def isDevBuild
def isSnapshotBuild
def isReleaseBuild

def sonatypeRepositoryUrl

// Apply settings for signing if available
if (file("signing.properties").exists()) {
    Properties props = new Properties()
    props.load(new FileInputStream("signing.properties"))
    props.each { key, value -> project.ext[key] = value }
}


//set build variables based on build type (release, continuous integration, development)
if(hasProperty("release")) {
    isReleaseBuild = true
    sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
} else if (hasProperty("snapshot")) {
    isSnapshotBuild = true
    version += "-SNAPSHOT"
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
} else {
    isDevBuild = true
}

repositories {
    jcenter()
	mavenCentral()
}

javafx {
    version = "11"
    modules = [ 'javafx.controls' ]
} 

subprojects.each {
    subproject -> evaluationDependsOn(subproject.path)
}

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}
dependencies {
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
}


// create one jar for the library
task oneJar(type: Jar, dependsOn: subprojects.assemble) {
    subprojects.each {
        subproject ->
            String fileBaseName = subproject.name
            System.out.println(fileBaseName)
            from subproject.configurations.archives.allArtifacts.files.filter { it.name.endsWith("${fileBaseName}-${version}.jar") }.collect { zipTree(it) }
    }
	    from {
        configurations.runtimeClasspath.collect { 'build/classes' }
    }

    manifest {
        attributes(
                'Built-By': System.properties['user.name'],
                'Created-By': System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.properties['java.vm.version'] + ")",
                'Build-Date': project.buildDate,
                'Build-Time': project.buildTime,
                'Build-Revision': versioning.info.commit,
                'Specification-Title': project.name,
                'Specification-Version': project.version,
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Bundle-Name': project.name,
                'Bundle-License': 'https://www.apache.org/licenses/LICENSE-2.0;description=Apache License Version 2.0;link=https://www.eclipse.org/legal/eplfaq.php',
                'Bundle-Description': 'enzo widgets',
                'Bundle-SymbolicName': 'eu.hansolo.enzo',
                'Automatic-Module-Name': 'eu.hansolo.enzo'
        )
    }
	
}


// create one jar for the javadoc
task docs(type: Javadoc) {
    source subprojects.collect { project -> project.sourceSets.main.allJava }
    classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
    destinationDir = new File('build/docs/javadoc')
}
task javadocJar(type: Jar, dependsOn: docs) {
    classifier ='javadoc'
    from 'build/docs/javadoc'
}


// create one jar for the source files
task sourcesJar(type: Jar, dependsOn: javadocJar) {
    classifier  = 'sources'
    subprojects.each {
        subproject ->
            from subproject.configurations.archives.allArtifacts.files.filter { it.name.endsWith("sources.jar") }.collect { zipTree(it) }
    }
}


artifacts {
    archives oneJar
    archives javadocJar
    archives sourcesJar
}


// signing the artifacts
if (isReleaseBuild) {
    signing {
        sign configurations.archives
    }
} else {
    task signArchives {
        // do nothing
    }
}




/*
 * ##############################################################################
 * #  Copyright (c) 2019 by Patrick Kutch https://github.com/PatrickKutch
 * # 
 * # Licensed under the Apache License, Version 2.0 (the "License");
 * #  you may not use this file except in compliance with the License.
 * #  You may obtain a copy of the License at
 * # 
 * #      http://www.apache.org/licenses/LICENSE-2.0
 * # 
 * #  Unless required by applicable law or agreed to in writing, software
 * #  distributed under the License is distributed on an "AS IS" BASIS,
 * #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * #  See the License for the specific language governing permissions and
 * #  limitations under the License.
 * ##############################################################################
 * #    File Abstract: 
 * #    Gradle build file for the Marvin JAVA application, Java 11 Builds a monolithic Jar
 * #
 * #	Steps to build:
 * #	gradlew buildEnzo
 * #	gradlew copyEnzoJar
 * #	gradlew build
 * #
 * #
 * ##############################################################################
 */
 
import java.text.SimpleDateFormat
plugins {
	id 'application'
	id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'java'
    id 'idea'
}

repositories {
//    jcenter()
	mavenCentral()
}

javafx {
    version = "11"
    modules = [ 'javafx.controls', 'javafx.web', 'javafx.media', 'javafx.swing', 'javafx.graphics', 'javafx.base']
} 


repositories {
	flatDir	{
		dirs 'Dependencies'
	}
}

dependencies{
	implementation  name: 'Enzo-0.3.6a'
}

task buildEnzo(type: GradleBuild) {
	println "-------- Building ENZO Library ---------"
	buildFile = "Dependencies/Enzo/build.gradle"
	tasks = ['build']
}


task copyEnzoJar(type: Copy) {
	println "-------- Copying ENZO Library ---------"
	from 'Dependencies/Enzo/build/libs'
	include '*.jar'
	into 'Dependencies'
}

buildEnzo.doLast{
	copyEnzoJar
}	


Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

mainClassName = '$moduleName/kutch.biff.marvin.Marvin' 
/*
jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'Marvin'
    }
}
*/

jar {
	baseName = 'BIFF.Marvin'
	
    manifest {
        attributes(
            'Main-Class': 'kutch.biff.marvin.Launcher',
            'Built-By': System.properties['user.name'],
            'Created-By': System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.properties['java.vm.version'] + ")",
            'Build-Date': project.buildDate,
            'Build-Time': project.buildTime,
            'Specification-Title': project.name,
            'Specification-Version': project.version,
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Bundle-Name': project.name,
            'Bundle-License': 'https://www.apache.org/licenses/LICENSE-2.0',
            'Bundle-Description': 'BIFF Marvin',
            'Bundle-SymbolicName': 'kutch.biff.marvin.Marvin',
            'Automatic-Module-Name': 'kutch.biff.marvin.Marvin'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}	

	

/*
 * ##############################################################################
 * #  Copyright (c) 2024 by Patrick Kutch https://github.com/PatrickKutch
 * # 
 * # Licensed under the Apache License, Version 2.0 (the "License");
 * #  you may not use this file except in compliance with the License.
 * #  You may obtain a copy of the License at
 * # 
 * #      http://www.apache.org/licenses/LICENSE-2.0
 * # 
 * #  Unless required by applicable law or agreed to in writing, software
 * #  distributed under the License is distributed on an "AS IS" BASIS,
 * #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * #  See the License for the specific language governing permissions and
 * #  limitations under the License.
 * ##############################################################################
 * #    File Abstract: 
 * #    Gradle build file for the Marvin JAVA application, Java 11 Builds a monolithic Jar
 * #
 * #	Steps to build:
 * #	gradlew buildEnzo
 * #	gradlew copyEnzoJar
 * #	gradlew build
 * #
 * #    or 
 * #	gradlew buildDeps
 * #	gradlew build
 * ##############################################################################
 */

import java.text.SimpleDateFormat

plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'java'
    id 'idea'
}

repositories {
    mavenCentral()
}

javafx {
    version = "12"
    modules = [ 'javafx.controls', 'javafx.web', 'javafx.media', 'javafx.swing', 'javafx.graphics', 'javafx.base']
}

dependencies {
    implementation files('Dependencies/Enzo-0.3.6a.jar') // Using the Enzo JAR from the Dependencies folder
}

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

mainClassName = 'kutch.biff.marvin.Launcher'

jar {
    baseName = 'BIFF.Marvin'

    manifest {
        attributes(
            'Main-Class': mainClassName,
            'Built-By': System.properties['user.name'],
            'Created-By': System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.properties['java.vm.version'] + ")",
            'Build-Date': project.buildDate,
            'Build-Time': project.buildTime,
            'Specification-Title': project.name,
            'Specification-Version': project.version,
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Bundle-Name': project.name,
            'Bundle-License': 'https://www.apache.org/licenses/LICENSE-2.0',
            'Bundle-Description': 'BIFF Marvin',
            'Bundle-SymbolicName': 'kutch.biff.marvin.Marvin',
            'Automatic-Module-Name': 'kutch.biff.marvin.Marvin'
        )
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // Handle duplicate entries

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } // Include dependencies, including Enzo
    }

    with copySpec {
        from sourceSets.main.output // Include Marvin's compiled classes and resources
    }
}

// Task to build the Enzo library
task buildEnzo(type: GradleBuild) {
    println "-------- Building ENZO Library ---------"
    buildFile = "Dependencies/Enzo/build.gradle"
    tasks = ['build']
}

// Task to copy the built Enzo JAR into the Dependencies folder
task copyEnzoJar(type: Copy) {
    println "-------- Copying ENZO Library ---------"
    from 'Dependencies/Enzo/build/libs'
    include '*.jar'
    into 'Dependencies'
}

// Make sure that copyEnzoJar runs after buildEnzo
copyEnzoJar.mustRunAfter buildEnzo

// Create a task that depends on buildEnzo, copyEnzoJar, and build Marvin
task buildDeps {
    dependsOn buildEnzo, copyEnzoJar
}

task runJar(type: JavaExec) {
    group = 'application'
    description = 'Run the application from the JAR file.'
    main = '-jar'
    args = ['build/libs/BIFF.Marvin.jar']
}
